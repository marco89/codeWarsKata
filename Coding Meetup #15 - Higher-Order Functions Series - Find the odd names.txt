/* You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.

Given the following input array:

var list1 = [
  { firstName: 'Aba', lastName: 'N.', country: 'Ghana', continent: 'Africa', age: 21, language: 'Python' },
  { firstName: 'Abb', lastName: 'O.', country: 'Israel', continent: 'Asia', age: 39, language: 'Java' }
];

write a function that when executed as findOddNames(list1) returns only the developers where if you add the ASCII representation of all characters in their first names, the result will be an odd number:

[
  { firstName: 'Abb', lastName: 'O.', country: 'Israel', continent: 'Asia', age: 39, language: 'Java' }
]

Explanation of the above:

    Sum of ASCII codes of letters in 'Aba' is: 65 + 98 + 97 = 260 which is an even number
    Sum of ASCII codes of letters in 'Abb' is: 65 + 98 + 98 = 261 which is an odd number

Notes:

    Preserve the order of the original list.
    Return an empty array [] if there is no developer with an "odd" name.
    The input array and first names will always be valid and formatted as in the example above. */

var list = [
  { firstName: 'Aba', lastName: 'N.', country: 'Ghana', continent: 'Africa', age: 21, language: 'Python' },
  { firstName: 'Abb', lastName: 'O.', country: 'Israel', continent: 'Asia', age: 39, language: 'Java' }
];  

function findOddNames(list) {
  const reducer = (a,b) =>  a+b.charCodeAt(0);
  return list.filter((person) => [...person.firstName].reduce(reducer,0)%2 );
}

/* 
person is an element of the array "list"

then ...person.firstName expands the chars of the firstName property into an array of separated strings

then we use reduce with the accumulator being 0 (the total sum) and currentval being the current element that is being added on to the total sum

then that is checked with the modulo operator to see whether it returns 1 or 0, 0 is returned in this case


const arr = [10, 20, 30, 10];

const reducedArr = (accumulator, currentVal) => accumulator + currentVal;


console.log(arr.reduce(reducedArr, 5)); // output 75 */









